#
name: CI-freebsd

on:
  push:
  workflow_dispatch:
    inputs:
      OS_VERSION:
        description: VM OS Version
        required: false
        # https://github.com/vmactions/freebsd-vm
        # [05-Dec-2022] 12.4
        # [11-Apr-2023] 13.2 13.3 13.4 13.5
        # [20-Nov-2023] 14.0 14.1 14.2 14.3 [10-Jun-2025]
        # [??-???-2025] 15.0
        default: '14.3'
        type: string
      MYENV:
        required: false
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  simple_build_freebsd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: FreeBSD shell actions
        id: freebsd
        uses: vmactions/freebsd-vm@v1
        env:
          MYENV: ${{ inputs.MYENV }}
        with:
          envs: MYENV
          release: ${{ inputs.OS_VERSION }}
          usesh: true
          prepare: |
            echo pkg_add devel/gmake lang/tcl/8.6 x11/tk/8.6 graphics/cairo graphics/freeglut devel/git
            # Query the package visibility
            for pkg in bash gmake gnugrep gsed tcl86 tk86 libSM libXi libXmu libXext cairo freeglut git python3 perl5 readline findutils pkgconf; \
            do \
               echo "### pkg search -g ${pkg}*"; \
               pkg search -g "${pkg}*"; \
            done
            # zlib is in base
            pkg install -y bash gmake gnugrep gsed tcl86 tk86 libSM libXi libXmu libXext cairo freeglut git python3 perl5 readline findutils pkgconf
          run: |
            set +e
            echo MYENV=$MYENV
            test -f /etc/os-release && cat /etc/os-release
            freebsd-version
            uname -a
            sysctl hw.model
            sysctl hw.ncpu
            sysctl hw.physmem
            sysctl hw.usermem
            cc -v
            ld -v
            make --version
            gmake --version
            pwd
            ls -lah
            whoami
            env | grep -v "TOKEN" | grep -v "SECRET" | sort
            which more # /usr/bin/more
            nproc=$(sysctl hw.ncpu | sed -e  's/.*=//')
            export nproc
            echo "nproc=$nproc"

            echo "### cc -dM -E - | sort :"
            echo | cc -dM -E - | sort
            echo "### c++ -dM -E -x c++ - | sort :"
            echo | c++ -dM -E -x c++ - | sort
            echo "###"

            git config --global --add safe.directory "$(pwd)"

            dirs="."
            [ -d /usr/local ] && dirs="$dirs /usr/local"
            [ -d /opt ]       && dirs="$dirs /opt"
            [ -d /usr/X11R6 ] && dirs="$dirs /usr/X11R6"
            gfind $dirs -type f \( -name "tkConfig.sh" -or -name "tclConfig.sh" \) -print
            gfind $dirs -type f \( -name "lib*cairo*" -or -name "lib*tk*" -or -name "lib*tcl*" \) -print
            gfind $dirs -type f \( -name "tcl.h" -or -iname "Xlib*.h" -or -name "cairo.h" \) -print
            gfind $dirs -type f \( -name "tcl*.pc" -or -name "tk*.pc" -or -name "*cairo*.pc" -or -name "freeglut*.pc" \) -print
            ggrep cairo_user_to_device /usr/local/include/cairo*.h /usr/local/include/cairo/cairo*.h
            nm -D /usr/local/lib/libcairo.so.* | grep cairo_user_to_device
            # freeglut # not found
            # pthread # not found
            for pkg in x11 cairo freeglut tcl86 tk86 pthread; \
            do \
              echo "### pkg-config --libs --cflags ${pkg} :"; \
              pkg-config --libs --cflags "$pkg"; \
            done
            # FIXME The build does not propertly use this information above, it was just used a
            # diagnostics to get the build to complete.

            set -o pipefail
            set -e

            # /usr/local/lib/tcl8.7/tclConfig.sh
            # /usr/local/lib/tk8.7/tkConfig.sh
            # Need this to provide -I/usr/local/include because tcltk/*.c accesses <X11/Xlib.h>
            # headers but is not using GR_CFLAGS
            # CPPFLAGS want this extra option for depends and compile
            CPPFLAGS="-I/usr/local/include"
            export CPPFLAGS
            with_x11_libsdir=$(  pkg-config --libs-only-L   x11    | sed -e 's/-L//g')
            with_x11_incsdir=$(  pkg-config --cflags-only-I x11    | sed -e 's/-I//g')
            with_tcl_libsdir=$(  pkg-config --libs-only-L   tcl86  | sed -e 's/-L//g')
            with_tk_libsdir=$(   pkg-config --libs-only-L   tk86   | sed -e 's/-L//g')
            with_cairo_libsdir=$(pkg-config --libs-only-L   cairo  | sed -e 's/-L//g') # multiple
            # The only really important ones as --with-tcl and --with-tk the others
            CFLAGS="$CFLAGS -std=c17 -g"
            export CFLAGS
            echo CFLAGS=$CFLAGS
            echo CXXFLAGS=$CXXFLAGS
            echo CPPFLAGS=$CPPFLAGS
            echo LDFLAGS=$LDFLAGS
            echo LIBS=$LIBS
            ./configure --x-libraries=${with_x11_libsdir} --x-includes=${with_x11_incsdir} --with-tcl=${with_tcl_libsdir}/tcl8.6 --with-tk=${with_tk_libsdir}/tk8.6 --with-cairo=/usr/local/include 2>&1 | tee CONFIGURE.LOG
            unset CFLAGS
            unset CPPFLAGS

            echo "===== defs.mak ====="
            cat defs.mak
            echo "===== defs.mak ====="

            gmake database/database.h
            gmake 2>&1 | tee MAKE.LOG

            gmake install 2>&1 | tee INSTALL.LOG
            
            dirs="."
            [ -d /usr/local ] && dirs="$dirs /usr/local"
            [ -d /opt ]       && dirs="$dirs /opt"
            gfind $dirs -type f \( -name "magicdnull" -or -name "magicexec" -or -name "*magic*.so" \) -exec ldd {} \;

            hash -r || true
            PATH="$PATH:/usr/local/bin"
            export PATH
            which magic
            magic --version || true

            echo "version; quit" | magic -T scmos -noconsole -nowindow
            true
