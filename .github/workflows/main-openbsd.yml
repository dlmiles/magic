#
name: CI-openbsd

on:
  push:
  workflow_dispatch:
    inputs:
      OS_VERSION:
        description: VM OS Version
        required: false
        # https://github.com/vmactions/openbsd-vm
        # [10-Apr-2023] 7.3
        # [16-Oct-2023] 7.4
        # [05-Apr-2024] 7.5
        # [08-Oct-2024] 7.6
        # [28-Apr-2025] 7.7
        default: '7.7'
        type: string
      MYENV:
        required: false
        type: string


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  simple_build_openbsd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: OpenBSD shell actions
        id: openbsd
        uses: vmactions/openbsd-vm@v1
        env:
          MYENV: ${{ inputs.MYENV }}
        with:
          envs: MYENV
          release: ${{ inputs.OS_VERSION }}
          usesh: true
          prepare: |
            echo pkg_add devel/gmake lang/tcl/8.6 x11/tk/8.6 graphics/cairo graphics/freeglut devel/git
            # Query the package visibility
            for pkg in bash gmake ggrep gsed tcl-8.6.16 tk-8.6.16 libSM libXi libXmu libXext cairo freeglut git python3 perl5 readline findutils pkgconf; \
            do \
               echo "### pkg_info -aQ ${pkg}*"; \
               pkg_info -aQ "${pkg}*"; \
            done
            # zlib is in base
            pkg_add -vv bash gmake ggrep gsed tcl-8.6.16 tk-8.6.16 libSM libXi libXmu libXext cairo freeglut git python3 perl5 readline findutils pkgconf
          run: |
            set +e
            echo MYENV=$MYENV
            test -f /etc/os-release && cat /etc/os-release
            openbsd-version
            uname -a
            sysctl hw.model
            sysctl hw.ncpu
            sysctl hw.physmem
            sysctl hw.usermem
            cc -v
            ld -v
            make --version
            gmake --version
            sed --version
            pwd
            ls -lah
            whoami
            env | grep -v "TOKEN" | grep -v "SECRET" | sort
            which more # /usr/bin/more
            nproc=$(sysctl hw.ncpu | sed -e  's/.*=//')
            export nproc
            echo "nproc=$nproc"

            echo "### cc -dM -E - | sort :"
            echo | cc -dM -E - | sort
            echo "### c++ -dM -E -x c++ - | sort :"
            echo | c++ -dM -E -x c++ - | sort
            echo "###"

            git config --global --add safe.directory "$(pwd)"

            dirs="."
            [ -d /usr/local ] && dirs="$dirs /usr/local"
            [ -d /opt ]       && dirs="$dirs /opt"
            [ -d /usr/X11R6 ] && dirs="$dirs /usr/X11R6"
            [ -d /usr/bin ]   && dirs="$dirs /usr/bin"
            gfind $dirs -type f \( -name "tkConfig.sh" -or -name "tclConfig.sh" \) -print
            gfind $dirs -type f \( -name "lib*cairo*" -or -name "lib*tk*" -or -name "lib*tcl*" \) -print
            gfind $dirs -type f \( -name "libX11*" -or -name "libXi*" -or -name "libXmu*" -or -name "libXext*" -or -name "libICE*" \) -print
            gfind $dirs -type f \( -name "tcl.h" -or -iname "Xlib*.h" -or -name "cairo.h" \) -print
            gfind $dirs -type f \( -name "tcl*.pc" -or -name "tk*.pc" -or -name "*cairo*.pc" -or -name "freeglut*.pc" \) -print
            gfind $dirs -type f \( -name "tclsh" -or -name "tclsh[89]*" -or -name "wish" -or -name "wish[89]*" \) -print
            ggrep cairo_user_to_device /usr/local/include/cairo*.h /usr/local/include/cairo/cairo*.h
            nm -D /usr/local/lib/libcairo.so.* | grep cairo_user_to_device
            #
            for pkg in x11 cairo freeglut tcl tk tcl86 tk86 tcl8.6 pthread; \
            do \
              echo "### pkg-config --libs --cflags ${pkg} :"; \
              pkg-config --libs --cflags "$pkg"; \
            done
            # FIXME The build does not propertly use this information above, it was just used a
            # diagnostics to get the build to complete.

            # /usr/local/lib/tcl/tcl8.6/tclConfig.sh
            # /usr/local/lib/tcl/tk8.6/tkConfig.sh
            # Need this to allow autoconf configure to find -lcairo when linking and testing for symbol
            LDFLAGS="$LDFLAGS -L/usr/local/lib"
            export LDFLAGS
            # Need this to provide -I/usr/local/include because tcltk/*.c accesses <X11/Xlib.h>
            # headers but is not using GR_CFLAGS
            # CPPFLAGS want this extra option for depends and compile
            CPPFLAGS="$CPPFLAGS -I/usr/X11R6/include"
            export CPPFLAGS
            # Need -lpthread on the linker argument
            LIBS="$LIBS -lpthread"
            export LIBS
            CFLAGS="$CFLAGS -std=c17 -g"
            CFLAGS="$CFLAGS -Wno-deprecated-non-prototype"
            echo CFLAGS=$CFLAGS
            echo CXXFLAGS=$CXXFLAGS
            echo CPPFLAGS=$CPPFLAGS
            echo LDFLAGS=$LDFLAGS
            LIBS="$LIBS -L/usr/X11R6/lib"
            echo LIBS=$LIBS
            ./configure --x-libraries=/usr/X11R6/lib --x-includes=/usr/X11R6/include --with-tcl=/usr/local/lib/tcl/tcl8.6 --with-tk=/usr/local/lib/tcl/tk8.6 --with-opengl=/usr/X11R6/include --with-cairo=/usr/local/include 2>&1 | tee CONFIGURE.LOG
            unset CPPFLAGS
            unset LDFLAGS
            unset LIBS

            echo "===== defs.mak ====="
            cat defs.mak
            echo "===== defs.mak ====="

            gmake database/database.h
            gmake 2>&1 | tee MAKE.LOG

            gmake install 2>&1 | tee INSTALL.LOG

            dirs="."
            [ -d /usr/local ] && dirs="$dirs /usr/local"
            [ -d /opt ]       && dirs="$dirs /opt"
            gfind $dirs -type f \( -name "magicdnull" -or -name "magicexec" -or -name "*magic*.so" \) -exec ldd {} \;

            hash -r || true
            PATH="$PATH:/usr/local/bin"
            export PATH
            which magic
            magic --version || true

            echo "version; quit" | magic -T scmos -noconsole -nowindow
            true
