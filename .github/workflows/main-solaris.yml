#
name: CI-solaris

on:
  push:
  workflow_dispatch:
    inputs:
      OS_VERSION:
        description: VM OS Version
        required: false
        # https://github.com/vmactions/solaris-vm
        # [28-Aug-2018] 11.4
        # [28-Aug-2018] 11.4-gcc
        default: '11.4'
        type: string
      MYENV:
        required: false
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  simple_build_solaris:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Solaris shell actions
        id: solaris
        uses: vmactions/solaris-vm@v1
        env:
          MYENV: ${{ inputs.MYENV }}
        with:
          envs: MYENV
          release: ${{ inputs.OS_VERSION }}
          usesh: true
          prepare: |
            pkgutil -y -i bash gmake ggrep gsed libz_dev tcl_dev tk_dev libcairo_dev freeglut git python33 perl libreadline_dev libncurses_dev findutils binutils gcc5core gcc5g++ pkgconfig
          run: |
            set +e
            echo MYENV=$MYENV
            test -f /etc/os-release && cat /etc/os-release
            cat /etc/release
            uname -a
            psrinfo -vp
            psrinfo -v
            cc -v
            ld --version
            gcc -v
            gld -v
            make --version
            gmake --version
            pwd
            ls -lah
            whoami
            env | grep -v "TOKEN" | grep -v "SECRET" | sort
            echo "::memstat" | mdb -k
            which more # /usr/ucb/more
            nproc=$(psrinfo -v)
            export nproc
            echo "nproc=$nproc"

            echo "### getconf -a :"
            getconf -a
            echo XBS5_LP64_OFF64_CFLAGS=$(getconf  XBS5_LP64_OFF64_CFLAGS)
            echo XBS5_LP64_OFF64_LDFLAGS=$(getconf XBS5_LP64_OFF64_LDFLAGS)
            echo XBS5_LP64_OFF64_LIBS=$(getconf    XBS5_LP64_OFF64_LIBS)

            echo "### cc -dM -E - | sort :"
            echo | gcc -dM -E - | sort
            echo "### c++ -dM -E -x c++ - | sort :"
            echo | c++ -dM -E -x c++ - | sort
            echo "###"

            git config --global --add safe.directory "$(pwd)"

            dirs="."
            [ -d /usr/local ] && dirs="$dirs /usr/local"
            [ -d /opt ]       && dirs="$dirs /opt"
            [ -d /usr/X11R6 ] && dirs="$dirs /usr/X11R6"
            [ -d /usr/bin ]   && dirs="$dirs /usr/bin"
            gfind $dirs -type f \( -name "tkConfig.sh" -or -name "tclConfig*" \) -print
            gfind $dirs -type f \( -name "lib*cairo*" -or -name "lib*tk*" -or -name "lib*tcl*" \) -print
            gfind $dirs -type f \( -name "tcl.h" -or -name "Xlib*.h" -or -name "cairo.h" \) -print
            gfind $dirs -type f \( -name "tcl*.pc" -or -name "tk*.pc" -or -name "*cairo*.pc" \) -print
            gfind $dirs -type f \( -name "tclsh" -or -name "tclsh[89]*" -or -name "wish" -or -name "wish[89]*" \) -print
            # /usr/bin/amd64/tclsh8.6
            # /usr/bin/wish8.6
            ggrep cairo_user_to_device /usr/local/include/cairo*.h /usr/local/include/cairo/cairo*.h
            nm -D /usr/local/lib/libcairo.so.* | grep cairo_user_to_device
            #
            for pkg in x11 cairo freeglut tcl tk pthread; \
            do \
              echo "### pkg-config --libs --cflags ${pkg} :"; \
              pkg-config --libs --cflags "$pkg"; \
            done

            set -o pipefail
            set -e

            [ "$(which more)" != "/usr/bin/more" ] && CFLAGS="$CFLAGS -DPAGERDIR=$(which more)"

            # CFLAGS by default it looks like the compiler targets 32bit then errors on linking to
            #  amd64 libraries.  We add the -g back in due to this being the default in ./configure
            CFLAGS="$CFLAGS -m64 -g"
            export CFLAGS
            echo CFLAGS=$CFLAGS
            echo CXXFLAGS=$CXXFLAGS
            echo CPPFLAGS=$CPPFLAGS
            echo LDFLAGS=$LDFLAGS
            echo LIBS=$LIBS
            ./configure --with-wish=/usr/bin/wish8.6 --x-libraries=/usr/local/lib --x-includes=/usr/local/include --with-tcl=/opt/csw/lib/amd64 --with-tk=/opt/csw/lib/amd64 --with-cairo=/usr/local/include 2>&1 | tee CONFIGURE.LOG
            unset CFLAGS

            echo "===== defs.mak ====="
            cat defs.mak
            echo "===== defs.mak ====="

            gmake database/database.h
            gmake 2>&1 | tee MAKE.LOG

            gmake install 2>&1 | tee INSTALL.LOG
            
            dirs="."
            [ -d /usr/local ] && dirs="$dirs /usr/local"
            [ -d /opt ]       && dirs="$dirs /opt"
            gfind $dirs -type f \( -name "magicdnull" -or -name "magicexec" -or -name "*magic*.so" \) -exec ldd {} \;

            hash -r || true
            PATH="$PATH:/usr/local/bin"
            export PATH
            which magic
            magic --version || true

            echo "version; quit" | magic -T scmos -noconsole -nowindow
            true
